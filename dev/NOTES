----------------------------------------------------------------------------
29 December 2012 10:48

New desired layout:

settings.py
main.py
azoth/
 <python>
resources/
 images/
 sounds/
saves/
tests/

After moving azoth/azoth.py up to main.py, saved games did not load correctly
(couldn't find session.py).

----------------------------------------------------------------------------
18 September 2012 08:37

The table viewer is working but infantile. It seems I should either invest in
some kind of simple but solid, traditional widget system (perhaps taking extjs
as a model) or perhaps ditch the concept of the traditional UI
altogether. Instead of coercing everything into square forms and tables, and
building a UI out of these fundamental building blocks (which I think of as the
orthodox approach), perhaps I should instead approach each ineraction uniquely
and try to do whatever is most natural, most obvious and least noticeable to
the user.

Take inventory for example. The u7 paper dolls were very natural and
obvious. They had two drawbacks: popping them open left them in the way, and
dragging things around in them was inefficient. The diablo-style was much
better, and would have been better yet if the system automatically packed the
grid space. In azoth dragging between party members will happen occasionally. I
will often want to pop open all their views, make adjustments, and dispell them
all at once. While adjusting I will want to observe how rebalancing inventory
and equipment affects stats. If party members are too widely separated they may
all be visible but won't all be able to swap items.

Having automatic pick-up and drop policies (like drop least valuable when full)
would go a long way as well. Automatic eating policies would also be good.

***

Minimum increment needed for a game: implement shroom's quest. Need:
* a town
* shroom
* conversation
* cave
* slimes
* mushrooms
* quest log

I have a town. I need shroom.

* Add npc dir
* Add npc/shroom.py, extends being.human

Back up. How do I add shroom? How did I get the initial place? I want to do
that via an editor.

When I start the game with no arguments, I want it to give me a menu:

* Create game
* Quit

The menu should appear centered in the main screen.

----------------------------------------------------------------------------
14 September 2012 09:00

Create a body viewer. A simple paper doll. Bind the body to a template image
for the paper doll, with a descriptor of slot locations in the image.

Or, just a list of slots:

Head: [icon] Helm {stats}
Right Hand: [icon] Sword {stats}
Left Hand: <empty>

Make it full screen.

Could make a generic grid viewer.

----------------------------------------------------------------------------
11 September 2012 23:32

Pathfinding and an NPC follower all working. Need an inventory UI. A bit
worried that the rule system, controller and gui interactions are not clean
enough. Should consider consolidating exception classes into one module. Maybe
revisit control flow, map it out and see if the right modules are handling the
right part of the sequence.

The base objects are mostly just containers. The rule system should define all
legal interactions. The executor should handle transactions and recovery on
rule violations (while bubbling the violations up). The controller should tell
objects what to attempt to do, expecting the executor to reject some attempts;
but meanwhile trying to predict what is possible. That's the part that bothers
me: both controller and executor need to query the rule system, which seems
redundant. But the controller cannot predict all problems with its choices,
since it is operating under intentionally limited information (neither the
player nor the AIs should be omniscient). So maybe that's unavoidable.

----------------------------------------------------------------------------
06 September 2012 06:13

pygame-specifics move up to SessionViewer. The player.Controller pushes itself
as the current controller and runs resume. It implements specific functions,
not general event handling.

SessionViewer.on_event maps events to controller commands and invokes them,
using the key binding table to guide the mapping. In the future it will
dispatch events to sub-widgets other than the controller.

Refactor Player:
* move on_event to SessionViewer
* move on_keypress to SessionViewer

Refactor SessionViewer:
* remove event_handlers
* set controller in run
* in on_keypress, invoke controller (if any)

Then, in on_mouse, translate coords to map and use it to teleport the player.

----------------------------------------------------------------------------
04 September 2012 08:39

Make container module. Move slots and body there. Move Bags and Trays from
obj/__init__.py to their own files there. Fix tests.

----------------------------------------------------------------------------
03 September 2012 16:13

When I change passability rules I have to reload the session. Not good. The
saved session should pick up this rule change automatically. Passability is a
game or at least a scenario-level rule.

Added libtcod for FOV. It comes in a tarball with a non-standard build system
and compiled libraries. A copy of libtcod.so must be placed where libtcodpy.py
can find it (typically the same dir as the executable). I don't like this and
am tempted to duplicate the raytracing code into a python C module.

----------------------------------------------------------------------------
02 September 2012 19:00

If the saved maps refer to terrains as objects then the objects must be saved
in the same pickle file. If those in turn refer to sprites then those must be
saved as well, and they will refer to images, so that's bust. Yes, sprites
currently allocate images in their ctors.

Currenty the saved map refers to terrain classes and I patch these with
sprites at runtime. That works ok. Python is the scripting language, so why
not? In the newer code I see I was trying to do terrain as objects allocated
from a json spec. But I think I would prefer doing it in classes for power even
if there were no other reason.


----------------------------------------------------------------------------
30 August 2012 22:47

Cleaned up repo and made it private on github.

Goal:
* Show a guy walking around on a map.
