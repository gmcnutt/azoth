----------------------------------------------------------------------------
19 January 2013 

Since I don't have any facing animations, will have to do something else while
I get those ready.

If an area cannot be pathfound to give an error message:
* Add Console class to function like cmdwin
 console.clear: vanishes
 console.error: sets message and level
 console.on_paint: paints message if one available, sets x, y to llc
* SessionViewer
 __init__: create console, set x,y to lower left corner
 on_mouse: if pathfind_to returns None, post error to console.
 on_subject_moved: clear the console
----------------------------------------------------------------------------
18 January 2013

Going to scale back the inter-tile ambitions and go for u6-level tech. The next
step is to get some facing animations.

----------------------------------------------------------------------------
16 January 2013

Tried adding more animation frames and smaller increments; tried re-centering
the camera after instead of before moving. Neither helped.

Left off trying some experimental camera-panning code.

----------------------------------------------------------------------------
15 January 2013

Fixed the deadlock. All is now working; but it hurts my eyes. Something about
the way the screen jumps AND the extra step of the characters hurts to watch. I
bet in u6 they didn't actually do inter-tile transitions, they probably just
advanced the animation on every move, and then used a timer to restore the guy
to standing if the player didn't keep moving... found some u6 videos on youtube
and I think that's basically it.

Options. I could pursue the u6 style, which will require some actual art. I
could ditch step transitions altogether and use iconography. I could explore
other ways to move the camera.

----------------------------------------------------------------------------
14 January 2013

Animated stepping implemented but there is still a bug: if the animation is
changed at the wrong time then a frame is skipped. It has to be set after the
tick but before the paint of the render loop. I could add another thread
condition to synchronize but suspect that will cause jumpiness. 

Might as well try it, I suppose. Hm. Deadlock. Yeah, I don't see how to avoid
that without expanding the scope of the lock to span both tick and
render. Well, might as well try that.

Hrm. The notify() method doesn't release the lock. 

----------------------------------------------------------------------------
12 January 2013

Fixing follow-bumping. Add an order to the event listeners. Have followers
put event listener on leader movement, earlier than the viewer. In the handler
have the followers do their turn.

Also added code to allow saving hooks. Viewer removes its hook while saving.

----------------------------------------------------------------------------
11 January 2013 05:45

Fixed the tearing, step pacing and missing fow updates by adding a condition
variable to synchronize the render and turn threads. Now the ass-bumping is
back.

To fix it this time I'll try having the player controller take the initiative
and control all the followers in the same turn. The Follow mode controller
might just turn into a nop. I need to move all the followers before the leader
fires the move event (since that triggers rendering and blocks until it is
done).

----------------------------------------------------------------------------
10 January 2013

Started on the render thread. Basically works, but seeing some artifacts like
screen tearing, movement not getting paced and fov not getting updated on fast
moves.

----------------------------------------------------------------------------
08 January 2013

The tick/render loop:

while not quit:
    cv.aquire()
    update_tick_on_all()
    if all_looping():
        cv.notify()
    cv.release()
    fps_wait()
    render()

The movement observer:

if obj.is_visible()
    cv.aquire()
    while not all_looping():
        cv.wait()
    cv.release()

Left off updating the PLAN for the experimental render branch. Tick loop is
sketched out, need to delve into the turn loop next.

----------------------------------------------------------------------------
07 January 2013 09:38

Removed the line

    self.animation = self.animations["standing"]

from Being.__init__ and now saves work. That assignment created a path from the
object back to a surface, without going through any classes.

Adding a listener on every object seems unweildy. Suppose I put the listener on
the place. 

Now who sets the animation on the being? The baseobject class fires
the events. The subclass with the animation could override and sets its
animation. 

How does it finish the animation? When the frames are all ticked.

How does it know which animation to use next? It could go back to default, or
we could use a stack or a state machine (default for now).

If it is not observed, will it get ticked? It shouldn't. 

How then does it finish the animation? Well, what if it didn't? The next time
it took a turn it would replace the animation anyway. At the start of turn it
could finish the animation (ie, replace it with default, or pop the stack, or
advance the state machine).

If it is observed, how does it get ticked? One option is to have the session
viewer run the tick loop when something changes in line-of-sight. Another
option is to run the tick loop in a thread.

If the session viewer runs the tick loop, how will the tick loop know when to
exit? When an object runs out of frames in a non-looping animation it could
raise an exception (while expiring it). Or, the tick loop could check and keep
running as long as any object has a non-looping animation.

If a thread runs the tick loop, how will the turn loop block until the
animation is done? I could use thread conditions. When an object expires an
animation it could post the condition, the turn loop can wait for these
conditions. Or the condition could be fired from the tick loop. Suppose I have
the session viewer put a listener on the place. Something changes in the place,
the listener gets called. It tells the tick loop it wants to be notified when
all animations are back to looping.

----------------------------------------------------------------------------
07 January 2013 06:43

Images must be re-loaded at runtime because I can't save them. They must be
kept in files separate from the save file. Something must map the filenames to
the classes that need them.

I could name a model.json for every class. Or I could put the model's python in
the class, but that would require putting image filenames in the class, which
I'm reluctant to do. Why? I guess I can't think of any actual reason this would
be worse; I suppose it's just my instinct to reduce static coupling. But I
can't think of a case (in python) where changing the model file is easier than
changing the class file.

Tried it. Works until I try to save: can't pickle Surface objects. Maybe
because class variables are referring to object instances that contain
Surfaces in their definitions? If I assign the class variable at runtime
(outside the definition) I don't have this problem. Not sure how pickle can
tell the difference.

Tried pulling the models out of the class definitions and assigning
after-the-fact: same result on save.

In the old sprite scheme the class was assigned a sprite, which had a sheet,
which had a surface. The path from objects to surface was more indirect but it
was there.


----------------------------------------------------------------------------
05 January 2013 12:19

In Player:move_or_swap, for the move case, need to setup the walk animation and
run it. This assumes the player is visible. The same thing must be done in
Follow:do_turn for the case where it is moving. In general, when a being moves,
and it is visible, it needs to run its move animation.

I could have the viewer setup observers on every being (maybe later on every
visible being). When the being moves, it checks if it is moving to or from a
visible tile, and if so, sets up and runs the animation.

The tick loop. This loop starts with a call to render. Then it loops over every
object, calling update_tick(). Then it calls the clock.fps().

object.update_tick() will advance the animation frame. It may also adjust the
image offset. An animation is a list of frames. It is stateless. It could be a
class. A frame is an image and an offset in pixels. The offset tells where to
paint the image relative to the subject's current tile's ulc. An instance of an
animation keeps track of the current frame. It supports get_current_frame(). It
also supports advance_frame(), which loops or raises an exception on
end-of-list.

The trick is the render. Render does all the terrains, then items, then
beings. All the layers in order. For each layer, for each thing, it gets two
things: the current image and its offset from the thing's location. Usually the
offset is (0, 0). The image will depend on the thing's current animation and
frame (which is adjusted via update_tick()).

A model is a set of animations indexed by name. The player needs 5 animations:
standing and moving in the four directions. These all need to be loaded with
frames, which need to be poked with images at runtime. Started sketching out
what a JSON descriptor would look like for a player model.

----------------------------------------------------------------------------
04 January 2013 07:45

Sketched out plans for a dual-loop system: a real-time fixed-rate
rendering/tick loop to drive animations concurrent with a blocking turn
loop. Probably the turn loop can drive the tick loop, or I can experiment with
two threads. The two-threaded approach might be simpler but I'm not sure how to
synchronize the two, so that the turn loop can block until the tick loop is
done rendering animation batches that it sets up and needs to wait for.

Also started downloading and tinkering with game-icons.net images as possible
game sprites. I've long had the notion that the game graphics are unimportant
once the player's brain is trained to recognize them for what they mean. If
true, then a very simple glyphic system would be just as effective - if not
more so - then a densely illustrated realistic animation system.

However, I often determine whether or not to even try a game based on its
screenshots. Heh, I remember back when I bought ultima 4... I don't think it
had any screen shots, but it had a great cover picture on the front of the box
and compelling verbage on the back.

So, if I were brave, I would go with even lower-res graphics that focused on
clearly conveying as much meaningful information as possible, and providing as
much quality feedback as possible, and ignore the screenshots. To that end the
roguelikes have a thing going for them, but the alphanumeric characters could
be improved upon with something more like heiroglyphics -- so long as they were
intuitive, systematics, and displayed the most important information at less
than a glance. And they'd have to be at least pretty if not realistic. That
might actually be harder to design than a realistic isometric animation view.


----------------------------------------------------------------------------
03 January 2013 06:28

Working out how to scroll inter-tile transitions when walking.

----------------------------------------------------------------------------
02 January 2013 06:36

Working on the "ass-bumping" animation effect in follow mode.

----------------------------------------------------------------------------
01 January 2013 18:37

Found some great sprite tutorials that make surprisingly good reading. Also
reading up on distutils to see if I can wrestle libtcodpy into a
pip-installable module. It just feels dirty to distribute compiled library
files as part of the game. I suppose it would work, but I want to see if I can
do it the Right Way.

----------------------------------------------------------------------------
30 December 2012 19:10

Moved the basic cleanup items to the top of the BACKLOG. After knocking those
out will proceed to adding features. The big one is replacing libtcod's fov.

----------------------------------------------------------------------------
29 December 2012 10:48

New desired layout:

settings.py
main.py
azoth/
 <python>
resources/
 images/
 sounds/
saves/
tests/

After moving azoth/azoth.py up to main.py, saved games did not load correctly
(couldn't find session.py).

----------------------------------------------------------------------------
18 September 2012 08:37

The table viewer is working but infantile. It seems I should either invest in
some kind of simple but solid, traditional widget system (perhaps taking extjs
as a model) or perhaps ditch the concept of the traditional UI
altogether. Instead of coercing everything into square forms and tables, and
building a UI out of these fundamental building blocks (which I think of as the
orthodox approach), perhaps I should instead approach each ineraction uniquely
and try to do whatever is most natural, most obvious and least noticeable to
the user.

Take inventory for example. The u7 paper dolls were very natural and
obvious. They had two drawbacks: popping them open left them in the way, and
dragging things around in them was inefficient. The diablo-style was much
better, and would have been better yet if the system automatically packed the
grid space. In azoth dragging between party members will happen occasionally. I
will often want to pop open all their views, make adjustments, and dispell them
all at once. While adjusting I will want to observe how rebalancing inventory
and equipment affects stats. If party members are too widely separated they may
all be visible but won't all be able to swap items.

Having automatic pick-up and drop policies (like drop least valuable when full)
would go a long way as well. Automatic eating policies would also be good.

***

Minimum increment needed for a game: implement shroom's quest. Need:
* a town
* shroom
* conversation
* cave
* slimes
* mushrooms
* quest log

I have a town. I need shroom.

* Add npc dir
* Add npc/shroom.py, extends being.human

Back up. How do I add shroom? How did I get the initial place? I want to do
that via an editor.

When I start the game with no arguments, I want it to give me a menu:

* Create game
* Quit

The menu should appear centered in the main screen.

----------------------------------------------------------------------------
14 September 2012 09:00

Create a body viewer. A simple paper doll. Bind the body to a template image
for the paper doll, with a descriptor of slot locations in the image.

Or, just a list of slots:

Head: [icon] Helm {stats}
Right Hand: [icon] Sword {stats}
Left Hand: <empty>

Make it full screen.

Could make a generic grid viewer.

----------------------------------------------------------------------------
11 September 2012 23:32

Pathfinding and an NPC follower all working. Need an inventory UI. A bit
worried that the rule system, controller and gui interactions are not clean
enough. Should consider consolidating exception classes into one module. Maybe
revisit control flow, map it out and see if the right modules are handling the
right part of the sequence.

The base objects are mostly just containers. The rule system should define all
legal interactions. The executor should handle transactions and recovery on
rule violations (while bubbling the violations up). The controller should tell
objects what to attempt to do, expecting the executor to reject some attempts;
but meanwhile trying to predict what is possible. That's the part that bothers
me: both controller and executor need to query the rule system, which seems
redundant. But the controller cannot predict all problems with its choices,
since it is operating under intentionally limited information (neither the
player nor the AIs should be omniscient). So maybe that's unavoidable.

----------------------------------------------------------------------------
06 September 2012 06:13

pygame-specifics move up to SessionViewer. The player.Controller pushes itself
as the current controller and runs resume. It implements specific functions,
not general event handling.

SessionViewer.on_event maps events to controller commands and invokes them,
using the key binding table to guide the mapping. In the future it will
dispatch events to sub-widgets other than the controller.

Refactor Player:
* move on_event to SessionViewer
* move on_keypress to SessionViewer

Refactor SessionViewer:
* remove event_handlers
* set controller in run
* in on_keypress, invoke controller (if any)

Then, in on_mouse, translate coords to map and use it to teleport the player.

----------------------------------------------------------------------------
04 September 2012 08:39

Make container module. Move slots and body there. Move Bags and Trays from
obj/__init__.py to their own files there. Fix tests.

----------------------------------------------------------------------------
03 September 2012 16:13

When I change passability rules I have to reload the session. Not good. The
saved session should pick up this rule change automatically. Passability is a
game or at least a scenario-level rule.

Added libtcod for FOV. It comes in a tarball with a non-standard build system
and compiled libraries. A copy of libtcod.so must be placed where libtcodpy.py
can find it (typically the same dir as the executable). I don't like this and
am tempted to duplicate the raytracing code into a python C module.

----------------------------------------------------------------------------
02 September 2012 19:00

If the saved maps refer to terrains as objects then the objects must be saved
in the same pickle file. If those in turn refer to sprites then those must be
saved as well, and they will refer to images, so that's bust. Yes, sprites
currently allocate images in their ctors.

Currenty the saved map refers to terrain classes and I patch these with
sprites at runtime. That works ok. Python is the scripting language, so why
not? In the newer code I see I was trying to do terrain as objects allocated
from a json spec. But I think I would prefer doing it in classes for power even
if there were no other reason.


----------------------------------------------------------------------------
30 August 2012 22:47

Cleaned up repo and made it private on github.

Goal:
* Show a guy walking around on a map.
